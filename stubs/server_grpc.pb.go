// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: server.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MovementEmitter_SendMove_FullMethodName = "/serverrpc.MovementEmitter/SendMove"
)

// MovementEmitterClient is the client API for MovementEmitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovementEmitterClient interface {
	SendMove(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Movement, Movement], error)
}

type movementEmitterClient struct {
	cc grpc.ClientConnInterface
}

func NewMovementEmitterClient(cc grpc.ClientConnInterface) MovementEmitterClient {
	return &movementEmitterClient{cc}
}

func (c *movementEmitterClient) SendMove(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Movement, Movement], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MovementEmitter_ServiceDesc.Streams[0], MovementEmitter_SendMove_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Movement, Movement]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovementEmitter_SendMoveClient = grpc.BidiStreamingClient[Movement, Movement]

// MovementEmitterServer is the server API for MovementEmitter service.
// All implementations must embed UnimplementedMovementEmitterServer
// for forward compatibility.
type MovementEmitterServer interface {
	SendMove(grpc.BidiStreamingServer[Movement, Movement]) error
	mustEmbedUnimplementedMovementEmitterServer()
}

// UnimplementedMovementEmitterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMovementEmitterServer struct{}

func (UnimplementedMovementEmitterServer) SendMove(grpc.BidiStreamingServer[Movement, Movement]) error {
	return status.Errorf(codes.Unimplemented, "method SendMove not implemented")
}
func (UnimplementedMovementEmitterServer) mustEmbedUnimplementedMovementEmitterServer() {}
func (UnimplementedMovementEmitterServer) testEmbeddedByValue()                         {}

// UnsafeMovementEmitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovementEmitterServer will
// result in compilation errors.
type UnsafeMovementEmitterServer interface {
	mustEmbedUnimplementedMovementEmitterServer()
}

func RegisterMovementEmitterServer(s grpc.ServiceRegistrar, srv MovementEmitterServer) {
	// If the following call pancis, it indicates UnimplementedMovementEmitterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MovementEmitter_ServiceDesc, srv)
}

func _MovementEmitter_SendMove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MovementEmitterServer).SendMove(&grpc.GenericServerStream[Movement, Movement]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MovementEmitter_SendMoveServer = grpc.BidiStreamingServer[Movement, Movement]

// MovementEmitter_ServiceDesc is the grpc.ServiceDesc for MovementEmitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovementEmitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serverrpc.MovementEmitter",
	HandlerType: (*MovementEmitterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMove",
			Handler:       _MovementEmitter_SendMove_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
